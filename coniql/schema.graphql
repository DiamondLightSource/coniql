"A scalar type that will accept anything, formatted as JSON"
scalar Any

"The underlying datatype of a number scalar or array"
enum NumberType {
     INT8, UINT8, INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT32,
     FLOAT64
}

"Instructions for how a number should be formatted for display"
enum DisplayForm {
     "Use the default representation from value"
     DEFAULT
     "Force string representation, most useful for array of bytes"
     STRING
     "Binary, precision determines number of binary digits"
     BINARY
     "Decimal, precision determines number of digits after decimal point"
     DECIMAL
     "Hexadecimal, precision determines number of hex digits"
     HEX
     "Exponential, precision determines number of digits after decimal point"
     EXPONENTIAL
     """
     Exponential where exponent is multiple of 3,
     precision determines number of digits after decimal point
     """
     ENGINEERING
}

"Indication of how the current value of a Channel should be interpreted"
enum ChannelQuality {
     "Value is known, valid, nothing is wrong"
     VALID
     "Value is known, valid, but is in the range generating a warning"
     WARNING
     "Value is known, valid, but is in the range generating an alarm condition"
     ALARM
     "Value is known, but not valid, e.g. a write channel before its first put"
     INVALID
     "The value is unknown, for instance because the channel is disconnected"
     UNDEFINED
     "The Channel is currently in the process of being changed"
     CHANGING
}

"Describes some metadata about an Channel, Action or Record"
interface Meta {
     "A long human readable possibly multi-line description"
     description: String!
     "Freeform text tags for widget, user role, port types, etc"
     tags: [String]!
     "A short human readable label not longer than a few words"
     label: String!
}

"A name-value entry for use in a List of Meta objects"
type NamedMeta {
     "The name of the field the meta represents"
     name: String!
     "The meta object that defines it"
     value: Meta!
}

"A base64 encoded array of Numbers with a given datatype"
type NumberArray {
     "The datatype of the input array"
     numberType: NumberType!
     "A base64 encoded version of the array"
     base64: String!
}

"A range of numbers. Null in either field means unbounded in that direction"
type Range {
     "The minimum number of the range"
     min: Float
     "The maximum number of the range"
     max: Float
}

"The current status of a Channel, including alarm and connection status"
type ChannelStatus {
     "Of what quality is the current Channel value"
     quality: ChannelQuality!
     "Freeform text describing the current status"
     message: String!
     "Whether the Channel will currently accept mutations"
     mutable: Boolean!
}

"Timestamps indicate when a Field was last updated"
type Time {
     "Seconds since Jan 1, 1970 00:00:00 UTC"
     seconds: Float!
     "A more accurate version of the nanoseconds part of the seconds field"
     nanoseconds: Int!
     "An integer value whose interpretation is deliberately undefined"
     userTag: Int!
}

"Information on how to display a numerical value"
type NumberDisplay {
     "The range of values that a control value should be within"
     controlRange: Range!
     "Expected range of values that will be produced"
     displayRange: Range!
     "The range outside of which an alarm will be produced"
     alarmRange: Range!
     "The range outside of which a warning will be produced"
     warningRange: Range!
     "Physical units for the value field"
     units: String!
     "Number of decimal places to display"
     precision: Int!
     "How to display"
     form: DisplayForm!
}

"The metadata to describe a generic object"
type ObjectMeta implements Meta {
     "A long human readable possibly multi-line description"
     description: String!
     "Freeform text tags for widget, user role, port types, etc"
     tags: [String]!
     "A short human readable label not longer than a few words"
     label: String!
     "Whether the value is an array"
     array: Boolean!
     "Object type, like String|Boolean|MyEnum|MyType"
     type: String!
}

"The metadata to describe a choice from a list of Strings"
type ChoiceMeta implements Meta {
     "A long human readable possibly multi-line description"
     description: String!
     "Freeform text tags for widget, user role, port types, etc"
     tags: [String]!
     "A short human readable label not longer than a few words"
     label: String!
     "Whether the value is an array"
     array: Boolean!
     "The possible choices that the string value could take"
     choices: [String]!
}

"The metadata required for a Number Channel"
type NumberMeta implements Meta {
     "A long human readable possibly multi-line description"
     description: String!
     "Freeform text tags for widget, user role, port types, etc"
     tags: [String]!
     "A short human readable label not longer than a few words"
     label: String!
     "Whether the value is an array"
     array: Boolean!
     "The native datatype of the value"
     numberType: NumberType!
     "How should the number be displayed"
     display: NumberDisplay!
}

"The metadata requried for a Table Channel"
type TableMeta implements Meta {
     "A long human readable possibly multi-line description"
     description: String!
     "Freeform text tags for widget, user role, port types, etc"
     tags: [String]!
     "A short human readable label not longer than a few words"
     label: String!
     "Meta objects describing each column of the table"
     columns: [NamedMeta]!
     "Which columns contain IDs, so cannot be modified"
     idColumns: [String]!
}

"""
A single value with associated time, status and metadata. These values can
be Null so that in a subscription they are only updated on change
"""
type Channel {
     "ID that uniquely defines this Channel, normally a PV"
     id: ID!
     "Metadata telling clients how to display, control, and validate"
     meta: Meta
     "The current value"
     value: Any
     "When the value was last updated"
     time: Time
     "Status of the connection, whether is is mutable, and alarm info"
     status: ChannelStatus
}

type QueryType {
     "Get a single channel"
     getChannel(
          "The ID of the Channel to connect to"
          id: ID!
          "How long to wait, negative is forever"
          timeout: Float = 5
     ): Channel
}

type SubscriptionType {
     "Subscribe to a single Float channel"
     subscribeChannel(
          "The ID of the Channel to connect to"
          id: ID!
     ): Channel
}

type MutationType {
     "Put a value to a Float channel"
     putChannel(
          "The ID of the Channel to connect to"
          id: ID!
          "The value to put to the channel"
          value: Any!
          "How long to wait, negative is forever"
          timeout: Float = 5
     ): Any
}

schema {
     query: QueryType
     subscription: SubscriptionType
     mutation: MutationType
}